<?php
/**
 * Created by PhpStorm.
 * User: ilyas
 * Date: 6/18/2017 AD
 * Time: 5:42 PM
 */

namespace console\components;

class Migration extends \yii\db\Migration
{
    CONST USER_TABLE = '{{%user}}';

    function toCamelCase($string)
    {
        return lcfirst(str_replace('_', '', ucwords($string, '_')));
    }

    /**
     * Add {{% and }} to given table name
     * @param $name
     * @return mixed
     */
    public function addPercentSignAndCurlyBraces($name)
    {
        if (strpos($name, '{{') !== false) {
            return $name;
        }
        return '{{%' . $name . '}}';
    }

    /**
     * Remove {{% and }} from given table name
     * @param $name
     * @return mixed
     */
    public function removePercentSignAndCurlyBraces($name)
    {
        if (strpos($name, '{{') !== false) {
            return preg_replace('/\\{\\{%(.*?)\\}\\}/', '\1', $name);
        }
        return $name;
    }

    /**
     * @param $table
     * @param $columns
     * @return string
     */
    public function generatePrimaryKeyName($table, $columns)
    {
        return 'pk-' . $this->removePercentSignAndCurlyBraces($table) . '-' . implode('-', (array)$columns);
    }

    /**
     * @param $table
     * @param $columns
     * @return string
     */
    public function generateForeignKeyName($table, $columns)
    {
        return 'fk-' . $this->removePercentSignAndCurlyBraces($table) . '-' . implode('-', (array)$columns);
    }

    /**
     * @param $table
     * @param $columns
     * @return string
     */
    public function generateIndexName($table, $columns)
    {
        return 'idx-' . $this->removePercentSignAndCurlyBraces($table) . '-' . implode('-', (array)$columns);
    }

    /**
     * @param $table
     * @param $columns
     */
    public function addPrimaryKeyWithAutoGeneratedName($table, $columns)
    {
        $this->addPrimaryKey($this->generatePrimaryKeyName($table, $columns), $table, $columns);
    }

    /**
     * @param $table
     * @param $columns
     */
    public function dropPrimaryKeyWithAutoGeneratedName($table, $columns)
    {
        $this->dropPrimaryKey($this->generatePrimaryKeyName($table, $columns), $table);
    }

    /**
     * @param $table
     * @param $columns
     * @param $refTable
     * @param $refColumns
     * @param null $delete
     * @param null $update
     */
    public function addForeignKeyWithAutoGeneratedName($table, $columns, $refTable, $refColumns, $delete = null, $update = null)
    {
        $this->addForeignKey($this->generateForeignKeyName($table, $columns), $table, $columns, $refTable, $refColumns, $delete, $update);
    }

    /**
     * @param $table
     * @param $columns
     */
    public function dropForeignKeyWithAutoGeneratedName($table, $columns)
    {
        $this->dropForeignKey($this->generateForeignKeyName($table, $columns), $table);
    }

    /**
     * @param $table
     * @param $columns
     * @param bool $unique
     */
    public function createIndexWithAutoGeneratedName($table, $columns, $unique = false)
    {
        $this->createIndex($this->generateIndexName($table, $columns), $table, $columns, $unique);
    }

    /**
     * @param $table
     * @param $columns
     */
    public function dropIndexWithAutoGeneratedName($table, $columns)
    {
        $this->dropIndex($this->generateIndexName($table, $columns), $table);
    }

    /**
     * Easily create table with foreign keys and indexes
     * The foreign key will be not null by default
     *
     * For easiest example: ['personId' => 'fk' => '{{%person}}']
     *
     * If you want to use custom column type
     *
     * For example:
     * [
     *   'personId' => [
     *     'fk' => [
     *       'type' => $this->integer(),
     *       'refTable' => '{{%person}}',
     *     ],
     *   ];
     * ]
     *
     * @param string $table
     * @param array $columns
     * @param null $options
     */
    public function createTable($table, $columns, $options = null)
    {
        $simpleColumns = [];
        $fks = [];
        $idxColumns = [];
        foreach ($columns as $key => $value) {
            if (is_array($value)) {
                $simpleColumns[$key] = $value['type'] ? $value['type'] : $this->integer()->notNull();
                // Aggregate foreign keys
                if ($value['fk']) {
                    $fk = is_array($value['fk']) ? $value['fk'] : ['refTable' => $value['fk']];
                    $fk['columns'] = $key;
                    $fk['refColumns'] = $fk['refColumns'] ? $fk['refColumns'] : 'id';
                    $fks[] = $fk;
                }
                // Aggregate columns for indexing
                if ($value['idx']) {
                    $idxColumns[] = $key;
                }
            } else {
                $simpleColumns[$key] = $value;
            }
        }
        parent::createTable($table, $simpleColumns, $options);
        foreach ($fks as $fk) {
            $this->addForeignKeyWithAutoGeneratedName(
                $table,
                $fk['columns'],
                $fk['refTable'],
                $fk['refColumns'],
                $fk['delete'],
                $fk['update']
            );
        }
        foreach ($idxColumns as $idxColumn) {
            $this->createIndexWithAutoGeneratedName($table, $idxColumn);
        }
    }

    /**
     * Please note that it's specific for database which has CURRENT_TIMESTAMP / ON UPDATE CURRENT_TIMESTAMP.
     * @param $table
     * @param $columns
     * @param null $options
     */
    public function createTableWithBlameAndTimestamp($table, $columns, $options = null)
    {
        $this->createTable($table, array_merge($columns, [
            'created_at' => 'DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP',
            'updated_at' => 'DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
            'created_by' => $this->integer()->notNull(),
            'updated_by' => $this->integer()->notNull(),
        ]), $options);
        $this->addForeignKeyWithAutoGeneratedName($table, 'created_by', self::USER_TABLE, 'id', 'RESTRICT', 'CASCADE');
        $this->addForeignKeyWithAutoGeneratedName($table, 'updated_by', self::USER_TABLE, 'id', 'RESTRICT', 'CASCADE');
        // Add comments
        $this->addCommentOnColumn($table, 'updated_at', 'วันเวลาที่สร้าง');
        $this->addCommentOnColumn($table, 'updated_at', 'วันเวลาที่แก้ไขล่าสุด');
        $this->addCommentOnColumn($table, 'created_by', 'ผู้ใช้งานที่สร้าง');
        $this->addCommentOnColumn($table, 'updated_by', 'ผู้ใช้งานที่แก้ไขล่าสุด');
    }

    public function addCommentOnWeightColumn($table)
    {
        $this->addCommentOnColumn($table, 'weight', 'น้ำหนักของแต่ละ Record (ใช้เพื่อจัดเรียงลำดับ)');
    }

    public function addCommentOnActiveColumn($table)
    {
        $this->addCommentOnColumn($table, 'active', 'สถานะการใช้งาน (1 ใช้งาน / 0 ปิดใช้งาน)');
    }
}
